version: '3.2'

services:

  #
  # Initialize all data directories with correct permissions.
  # This is a workaround for the fact that Docker always creates volumes as root. This could also be done outside
  # docker-compose in a shell script, but it would add yet another manual maintenance step. This way, permissions are
  # set correctly by simply using docker-compose.
  #
  faf-init-volumes:
    container_name: faf-init-volumes
    image: alpine:latest
    volumes:
      - ./:/faf-stack
    command: sh -c "cd /faf-stack && sh scripts/init-volumes.sh"

  #
  # FAF MySQL database.
  #
  faf-db:
    container_name: faf-db
    build: git://github.com/FAForever/db.git#v43
    user: ${FAF_DB_USER}
    networks:
      faf:
        aliases:
          - "faf-db"
    restart: always
    env_file: ./config/faf-db/faf-db.env
    ports:
      - "127.0.0.1:3306:3306"
    volumes:
      - ./data/faf-db:/var/lib/mysql
    depends_on:
      - faf-init-volumes

  #
  # FAF game server for clients to connect to.
  #
  faf-python-server:
    container_name: faf-python-server
    build: git://github.com/FAForever/server.git#v0.9.2
    user: ${FAF_PYTHON_SERVER_USER}
    networks:
      faf:
        aliases:
          - "faf-python-server"
    restart: always
    env_file: ./config/faf-python-server/faf-python-server.env
    volumes:
      - ./config/faf-python-server/faf-server.pem:/code/faf-server.pem
    ports:
      - "8001:8001" # Server
    depends_on:
      - faf-init-volumes
      - faf-db

  #
  # FAF game server for clients to connect to.
  #
  faf-java-server:
    container_name: faf-java-server
    image: faforever/faf-java-server:1.0.0
    user: ${FAF_JAVA_SERVER_USER}
    networks:
      faf:
        aliases:
          - "faf-java-server"
    restart: always
    env_file: ./config/faf-java-server/faf-java-server.env
    expose:
      - "8089" # HTTP Management API
    ports:
      - "8001:8001" # Server
    volumes:
      - ./data/faf-java-server/logs:/logs
    depends_on:
      - faf-init-volumes
      - faf-db
    # TODO move to Dockerfile
    healthcheck:
      test: "wget -q -O /dev/null http://localhost:8089/health"
      interval: 30s
      timeout: 5s
      retries: 3

  #
  # FAF JSON-API to provide data over HTTP.
  #
  faf-java-api:
    container_name: faf-java-api
    image: faforever/faf-java-api:0.6.4
    user: ${FAF_JAVA_API_USER}
    networks:
      faf:
        aliases:
          - "faf-java-api"
    restart: always
    env_file: ./config/faf-java-api/faf-java-api.env
    volumes:
      - ./data/content:/content
      - ./data/faf-java-api/logs:/logs
    expose:
      - "8081" # HTTP Management API
    ports:
      - "8010:8010" # HTTP API
    depends_on:
      - faf-init-volumes
      - faf-db
    # TODO move to Dockerfile
    healthcheck:
      test: "wget -q -O /dev/null http://localhost:8010/management/health"
      interval: 30s
      timeout: 5s
      retries: 3

  #
  # Old implementation of an almost JSON-API conform API.
  #
  faf-python-api:
    build: git://github.com/FAForever/api.git#v0.9.0
    command: python run.py -p 80
    user: ${FAF_PYTHON_API_USER}
    networks:
      faf:
        aliases:
          - "faf-python-api"
    depends_on:
      - faf-init-volumes
      - faf-db
    env_file: ./config/faf-python-api/faf-python-api.env
    environment:
      - VIRTUAL_HOST=api.faforever.com
      - FAF_API_ENVIRONMENT=stabler
      - LETSENCRYPT_HOST=api.faforever.com
      - LETSENCRYPT_EMAIL=admin@faforever.com
      - STATSD_SERVER=172.17.0.1:8125
    volumes:
      - /opt/stable/content:/content
    ports:
      - "8093:80"

  #
  # FAF website.
  #
  faf-website:
    container_name: faf-website
    build: git://github.com/FAForever/website.git#v1.1.1.9
    user: ${FAF_WEBSITE_USER}
    restart: always
    env_file: ./config/faf-website/faf-website.env
    networks:
      - faf
    depends_on:
      - faf-db
    ports:
      - "127.0.0.1:8020:3000"

  #
  # Interface to administer Spring Boot applications.
  #
  faf-spring-boot-admin:
    container_name: faf-spring-boot-admin
    image: aetas/spring-boot-admin-docker:1.4.1
    user: ${FAF_SPRING_BOOT_ADMIN_USER}
    ports:
      - "127.0.0.1:8030:8080"
    networks:
      faf:
        aliases:
          - "faf-spring-boot-admin"
    restart: always
    healthcheck:
      test: "wget -q -O /dev/null http://localhost:8080"
      interval: 30s
      timeout: 5s
      retries: 3

  #
  # Prometheus is a monitoring and alerting tool that time-series data.
  #
  faf-prometheus:
    container_name: faf-prometheus
    image: prom/prometheus:v2.0.0-beta.2
    user: ${FAF_PROMETHEUS_USER}
    networks:
      faf:
        aliases:
          - "faf-prometheus"
    restart: always
    ports:
      - "127.0.0.1:9090:9090" # Webinterface
    volumes:
      - ./config/faf-prometheus/faf-prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/faf-prometheus:/prometheus
    depends_on:
      - faf-init-volumes

  #
  # Grafana reads data from Prometheus and draws monitoring dashboards.
  #
  # This image needs to run as root since is changes users inside the container.
  #
  faf-grafana:
    container_name: faf-grafana
    image: grafana/grafana:4.5.1
    restart: always
    networks:
      - "faf"
    volumes:
      - ./config/faf-grafana:/etc/grafana/scripts
      - ./data/faf-grafana:/var/lib/grafana
    depends_on:
      - faf-init-volumes
    env_file: ./config/faf-grafana/faf-grafana.env
    ports:
      - "8090:3000"

  #
  # IRC for FAF chat.
  #
  faf-unrealircd:
    container_name: faf-unrealircd
    user: ${FAF_UNREALIRCD_USER}
    build:
      context: git://github.com/FAForever/docker-unrealircd#feature/docker-improvements
      args:
        unreal_version: '4.0.1'
    ulimits:
      nofile:
        soft: 8192
        hard: 8192
    networks:
      faf:
        aliases:
          - "faf-unrealircd"
          - "irc.faforever.com"
          - "services.faforever.com"
    depends_on:
      - faf-init-volumes
      - faf-db
    volumes:
      - ./config/faf-unrealircd/ssl:/home/unreal/unrealircd/conf/ssl
      - ./config/faf-unrealircd/unrealircd.conf:/home/unreal/unrealircd/conf/unrealircd.conf
      - ./config/faf-unrealircd/ircd.motd:/home/unreal/unrealircd/conf/ircd.motd
      - ./config/faf-unrealircd/ircd.rules:/home/unreal/unrealircd/conf/ircd.rules
    restart: always
    ports:
      - "6667:6667"
      - "6697:6697"
      - "6665:6665"
      - "6666:6666"
      - "8067:8067"
      - "7070:7070"
      - "8167:8167"

  #
  # QAI irc bot
  #
  faf-qai:
    container_name: faf-qai
    build: git://github.com/FAForever/QAI#v1.0
    user: ${FAF_QAI_USER}
    depends_on:
      - faf-init-volumes
    volumes:
      - ./config/faf-qai:/config
    networks:
      - faf

  #
  # FAF anope services for irc
  #
  faf-anope:
    container_name: faf-anope
    build:
      context: ./docker-anope
      args:
        anope_version: '2.0.3'
    networks:
      faf:
        aliases:
          - "services.faforever.com"
    volumes:
      - ./config/faf-anope/services.conf:/home/unreal/unrealircd/services/conf/services.conf
    depends_on:
      faf-db:
        condition: service_healthy
      faf-unrealircd
    restart: always

  #
  # FAF Mumble server.
  #
  faf-murmur:
    container_name: faf-murmur
    build: git://github.com/FAForever/murmur#v1.0
    user: ${FAF_MUMBLE_USER}
    networks:
      - faf
    depends_on:
      - faf-db
    restart: always
    env_file: ./config/faf-murmur/faf-murmur.env
    ports:
      - "64738:64738"
      - "64738:64738/udp"

  #
  # Legacy FAF "apps" like the "link to steam" or "forgot password" pages which are being replaced.
  #
  faf-legacy-apps:
    container_name: faf-legacy-apps
    image: richarvey/nginx-php-fpm:php5
    user: ${FAF_LEGACY_APPS_USER}
    restart: always
    volumes:
      - ./data/content/app:/usr/share/nginx/html
    depends_on:
      - faf-init-volumes
    env_file: ./config/faf-legacy-apps/faf-legacy-apps.env
    ports:
      - "127.0.0.1:8094:80"

  #
  # The content management system which is still being used as a backend for the website. The website accesses
  # Wordpress over a JSON API plugin.
  #
  faf-wordpress:
    container_name: faf-wordpress
    image: richarvey/nginx-php-fpm:php5
    user: ${FAF_WORDPRESS_USER}
    restart: always
    volumes:
      - ./data/faf-wordpress:/usr/share/nginx/html
    networks:
      faf:
        aliases:
          - "faf-wordpress"
    depends_on:
      - faf-init-volumes
      - faf-db
    env_file: ./config/faf-wordpress/faf-wordpress.env
    ports:
      - "127.0.0.1:8095:80"

  #
  # The new FAF clanapp.
  #
  faf-clanapp:
    container_name: faf-clanapp
    image: dragonfire/clans:1.0.3
    user: ${FAF_CLANAPP_USER}
    networks:
      - faf
    depends_on:
      - faf-db
    restart: always
    env_file: ./config/faf-clans/faf-clans.env
    ports:
      - "127.0.0.1:8096:8080"

  #
  # A dirty but effective voting app written by Softly.
  #
  faf-softvote:
    container_name: faf-softvote
    build: git://github.com/FAForever/softvote.git#v1.0
    user: ${FAF_SOFTVOTE_USER}
    networks:
      - faf
    depends_on:
      - faf-db
    restart: always
    env_file: ./config/faf-softvote/faf-softvote.env
    ports:
      - "127.0.0.1:8097:80"

  #
  # FAF phpBB forum software.
  #
  faf-phpbb3:
    container_name: faf-phpbb3
    image: richarvey/nginx-php-fpm:php5
    user: ${FAF_PHPBB3_USER}
    volumes:
      - ./data/faf-phpbb3/phpbb3/www:/usr/share/nginx/html
      - ./data/faf-phpbb3/phpbb3:/usr/share/phpbb3
      - ./data/faf-phpbb3/etc/phpbb3:/etc/phpbb3
    networks:
      - faf
    depends_on:
      - faf-init-volumes
      - faf-db
    restart: always
    env_file: ./config/faf-phpbb3/faf-phpbb3.env
    ports:
      - "127.0.0.1:8098:80"

  #
  # Serves static files such as maps, mods, game files etc.
  #
  faf-content:
    container_name: faf-content
    image: richarvey/nginx-php-fpm:php5
    user: ${FAF_CONTENT_USER}
    volumes:
      - ./data/content:/usr/share/nginx/html
    networks:
      - faf
    depends_on:
      - faf-init-volumes
      - faf-db
    restart: always
    env_file: ./config/faf-content/faf-content.env
    ports:
      - "127.0.0.1:8091:80"

  #
  # The FAF mediawiki.
  #
  faf-mediawiki:
    container_name: faf-mediawiki
    image: richarvey/nginx-php-fpm:php5
    user: ${FAF_MEDIAWIKI_USER}
    restart: always
    volumes:
      - ./data/faf-mediawiki:/usr/share/nginx/html
    depends_on:
      - faf-init-volumes
    env_file: ./config/faf-mediawiki/faf-mediawiki.env
    ports:
      - "127.0.0.1:8092:80"

  #
  # The legacy update server from which the legacy client gets its update information.
  #
  faf-legacy-updater:
    container_name: faf-legacy-updater
    build: git://github.com/FAForever/legacy-updater.git#v1.0
    user: ${FAF_LEGACY_UPDATER_USER}
    restart: always
    volumes:
      - ./data/content:/content
    networks:
      - faf
    depends_on:
      - faf-init-volumes
      - faf-db
    restart: always
    env_file: ./config/faf-legacy-updater/faf-legacy-updater.env
    ports:
      - "9001:9001"

  #
  # The legacy "live replay" server.
  #
  faf-legacy-live-replay-server:
    container_name: faf-legacy-live-replay-server
    build: git://github.com/FAForever/legacy-replay-server.git#v1.0
    user: ${FAF_LEGACY_LIVE_REPLAY_SERVER_USER}
    restart: always
    volumes:
      - ./data/content:/content
    networks:
      - faf
    depends_on:
      - faf-init-volumes
      - faf-db
    restart: always
    env_file: ./config/faf-legacy-live-replay-server/faf-legacy-live-replay-server.env
    ports:
      - "15000:15000"

  #
  # The legacy "secondary server" which does many different things, most of which are being replaced.
  #
  faf-legacy-secondary-server:
    container_name: faf-legacy-secondary-server
    build: git://github.com/FAForever/legacy-secondaryServer.git#v1.0
    user: ${FAF_LEGACY_SECONDARY_SERVER_USER}
    restart: always
    volumes:
      - ./data/content:/content
    networks:
      - faf
    depends_on:
      - faf-init-volumes
      - faf-db
    restart: always
    env_file: ./config/faf-legacy-secondary-server/faf-legacy-secondary-server.env
    ports:
      - "11002:11002"

  #
  # A small web tool that allows users to invite themselves into our Slack group.
  #
  faf-slack-invite-automation:
    container_name: faf-slack-invite-automation
    build: git://github.com/outsideris/slack-invite-automation.git#49798f6
    user: ${FAF_SLACK_INVITE_AUTOMATION_USER}
    env_file: ./config/faf-slack-invite-automation/faf-slack-invite-automation.env
    restart: always
    ports:
      - "3001:3000"

  #
  # IRC <-> Discord bot. Connects IRC's #aeolus to Discord's #aeolus
  #
  faf-discord-irc:
    container_name: faf-discord-irc
    build: git://github.com/FAForever/faf-discord-irc.git#v1.0
    user: ${FAF_DISCORD_IRC_USER}
    volumes:
      - ./config/faf-discord-irc/config.json:/config/config.json
    restart: always
    depends_on:
      - faf-init-volumes

  #
  # An nginx proxy which exposes FAF services such as the website, the API etc. through HTTP. It does so by listening
  # for docker containers to come online which have the environment variable VIRTUAL_HOST set. Once such a container
  # comes online, it sets up a virtual host which is forwarded to the only exposed port of that service. If multiple
  # ports are exposed, VIRTUAL_PORT can be set to pick one.
  #
  # For more information, see https://github.com/jwilder/nginx-proxy
  #
  faf-nginx:
    container_name: faf-nginx
    image: jwilder/nginx-proxy:0.5.0
    user: ${FAF_NGINX_USER}
    volumes:
      - ./data/content:/content
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./data/faf-nginx/vhost.d:/etc/nginx/vhost.d:ro
      - ./data/faf-nginx/certs:/etc/nginx/certs:ro
      - /usr/share/nginx/html
    depends_on:
      - faf-init-volumes
    ports:
      - "80:80"
      - "443:443"

  #
  # An extension of the nginx proxy which converts exposed containers to HTTPS and automatically generates a
  # Let's Encrypt SSL certificate. It does so by listening for docker containers to come online which have the
  # environment variable LETSENCRYPT_HOST and LETSENCRYPT_EMAIL set.
  #
  # For more information, see https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion
  #
  faf-nginx-certs:
    container_name: faf-nginx-certs
    image: jrcs/letsencrypt-nginx-proxy-companion:v1.5
    user: ${FAF_NGINX_CERTS_USER}
    volumes:
      - ./data/faf-nginx/certs:/etc/nginx/certs:rw
      - ./data/faf-nginx/vhost.d:/etc/nginx/vhost.d:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - faf-init-volumes

  #
  # Temporary avatar management tool.
  #
  faf-jeremy:
    build: git://github.com/FAForever/Jeremy.git#130c347
    user: ${FAF_JEREMY_USER}
    env_file: ./config/faf-jeremy/faf-jeremy.env
    environment:
      - VIRTUAL_HOST=jeremy.dev.faforever.com
      - FAF_API_ENVIRONMENT=stabler
      - ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory
      - LETSENCRYPT_HOST=jeremy.dev.faforever.com
      - LETSENCRYPT_EMAIL=admin@faforever.com
    ports:
      - "8099:5000"

networks:
  faf:
    driver: bridge
